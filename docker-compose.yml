version: '3.8'

services:
  # Base de donn√©es Cercle
  postgres:
    image: postgres:16.4
    container_name: cercle-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${HOST_PORT}:${POSTGRES_PORT}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database:/docker-entrypoint-initdb.d
    networks:
      - cercle_network

  # Backend API avec hot reload
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cercle-backend
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: ${API_PORT}
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN}
      FRONTEND_URL: ${FRONTEND_URL}
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS}
      # üî• CREDENTIALS EMAIL HARDCOD√âS - REMPLACEZ PAR VOS VRAIS CREDENTIALS
      EMAIL_USER: "cercle.app.2025@gmail.com"
      EMAIL_PASSWORD: "vgap nzic hhvj nati"
      EMAIL_FROM: "noreply@cercle.com"
      # Variables SMTP optionnelles
      SMTP_HOST: ""
      SMTP_PORT: ""
      SMTP_SECURE: ""
      SMTP_USER: ""
      SMTP_PASSWORD: ""
      # Rate limiting
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS}
      AUTH_RATE_LIMIT_WINDOW_MS: ${AUTH_RATE_LIMIT_WINDOW_MS}
      AUTH_RATE_LIMIT_MAX_REQUESTS: ${AUTH_RATE_LIMIT_MAX_REQUESTS}
      EMAIL_RATE_LIMIT_WINDOW_MS: ${EMAIL_RATE_LIMIT_WINDOW_MS}
      EMAIL_RATE_LIMIT_MAX_REQUESTS: ${EMAIL_RATE_LIMIT_MAX_REQUESTS}
      # Logging
      LOG_LEVEL: ${LOG_LEVEL}
      # File upload
      MAX_FILE_SIZE: ${MAX_FILE_SIZE}
      ALLOWED_FILE_TYPES: ${ALLOWED_FILE_TYPES}
      # Features
      MAX_POST_LENGTH: ${MAX_POST_LENGTH}
      MAX_MESSAGE_LENGTH: ${MAX_MESSAGE_LENGTH}
      MAX_BIO_LENGTH: ${MAX_BIO_LENGTH}
      DEFAULT_PAGE_SIZE: ${DEFAULT_PAGE_SIZE}
      MAX_PAGE_SIZE: ${MAX_PAGE_SIZE}
    ports:
      - "${API_PORT}:${API_PORT}"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      # Volume pour hot reload - Monte le code source
      - ./backend:/app
      - /app/node_modules  # √âvite d'√©craser node_modules
    restart: unless-stopped
    entrypoint: ["sh", "-c", "sleep 15 && npx prisma generate && npm run dev"]
    networks:
      - cercle_network

  # Frontend React avec hot reload
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: cercle-frontend
    environment:
      NODE_ENV: ${NODE_ENV}
      VITE_API_BASE_URL: ${VITE_API_BASE_URL}
      # Variables pour hot reload WSL
      CHOKIDAR_USEPOLLING: "true"
      VITE_HMR_PORT: ${FRONTEND_PORT}
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    depends_on:
      - backend
    volumes:
      # Volume pour hot reload - Monte le code source
      - ./frontend:/app
      - /app/node_modules  # √âvite d'√©craser node_modules
    restart: unless-stopped
    # Commande optimis√©e pour hot reload
    command: npm run dev -- --host 0.0.0.0 --port ${FRONTEND_PORT}
    networks:
      - cercle_network

# Volumes pour la persistance
volumes:
  postgres_data:
    driver: local

# R√©seau d√©di√©
networks:
  cercle_network:
    driver: bridge