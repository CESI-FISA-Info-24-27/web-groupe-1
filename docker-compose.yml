version: '3.8'

services:
  # Base de donnÃ©es Cercle
  postgres:
    image: postgres:16.4
    container_name: cercle-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${HOST_PORT}:${POSTGRES_PORT}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database:/docker-entrypoint-initdb.d
    networks:
      - cercle_network

  # Backend API avec hot reload
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: cercle-backend
    environment:
      NODE_ENV: ${NODE_ENV}
      PORT: ${API_PORT}
      DATABASE_URL: ${DATABASE_URL}
      JWT_SECRET: ${JWT_SECRET}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET}
      FRONTEND_URL: ${FRONTEND_URL}
    ports:
      - "${API_PORT}:${API_PORT}"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      # ðŸ”¥ VOLUME POUR HOT RELOAD - Monte le code source
      - ./backend:/app
      - /app/node_modules  # Ã‰vite d'Ã©craser node_modules
    restart: unless-stopped
    entrypoint: ["sh", "-c", "sleep 15 && npx prisma generate && npm run dev"]
    networks:
      - cercle_network

  # Frontend React avec hot reload
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: cercle-frontend
    environment:
      NODE_ENV: ${NODE_ENV}
      VITE_API_BASE_URL: ${VITE_API_BASE_URL}
      # ðŸ”¥ VARIABLES POUR HOT RELOAD WSL
      CHOKIDAR_USEPOLLING: "true"
      VITE_HMR_PORT: ${FRONTEND_PORT}
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    depends_on:
      - backend
    volumes:
      # ðŸ”¥ VOLUME POUR HOT RELOAD - Monte le code source
      - ./frontend:/app
      - /app/node_modules  # Ã‰vite d'Ã©craser node_modules
    restart: unless-stopped
    # ðŸ”¥ COMMANDE OPTIMISÃ‰E POUR HOT RELOAD
    command: npm run dev -- --host 0.0.0.0 --port ${FRONTEND_PORT}
    networks:
      - cercle_network

  # # Serveur de fichiers MinIO (commentÃ© pour le dev)
  # minio:
  #   image: minio/minio:latest
  #   container_name: cercle-minio
  #   ports:
  #     - "${MINIO_API_PORT}:9000"
  #     - "${MINIO_CONSOLE_PORT}:9001"
  #   environment:
  #     MINIO_ROOT_USER: ${MINIO_ROOT_USER}
  #     MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
  #   command: server /data --console-address ":9001"
  #   volumes:
  #     - minio_data:/data
  #   networks:
  #     - cercle_network
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
  #     interval: 30s
  #     timeout: 20s
  #     retries: 3

# Volumes pour la persistance
volumes:
  postgres_data:
    driver: local
  # minio_data:
  #   driver: local

# RÃ©seau dÃ©diÃ©
networks:
  cercle_network:
    driver: bridge