-- ************************* SqlDBM: PostgreSQL *************************
-- ****************** Generated by SqlDBM: CESI-WEB-A3 ******************


CREATE SCHEMA IF NOT EXISTS cercle;


CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pg_trgm";


-- ************************************** cercle.roles
CREATE TABLE cercle.roles
(
 id_role SERIAL NOT NULL,
 role    varchar(50) NOT NULL,
 CONSTRAINT PK_ROLES PRIMARY KEY ( id_role )
);


-- ************************************** cercle.langues
CREATE TABLE cercle.langues
(
 id_langue SERIAL NOT NULL,
 langue    varchar(50) NOT NULL,
 CONSTRAINT PK_LANGUES PRIMARY KEY ( id_langue )
);


-- ************************************** cercle.themes
CREATE TABLE cercle.themes
(
 id_theme SERIAL NOT NULL,
 theme    varchar(50) NOT NULL,
 CONSTRAINT PK_THEMES PRIMARY KEY ( id_theme )
);


-- ************************************** cercle.message_type
CREATE TABLE cercle.message_type
(
 id_message_type SERIAL NOT NULL,
 message_type    varchar(50) NOT NULL,
 CONSTRAINT PK_MESSAGE_TYPE PRIMARY KEY ( id_message_type )
);


-- ************************************** cercle.tags
CREATE TABLE cercle.tags
(
 id_tag SERIAL NOT NULL,
 tag    varchar(50) NOT NULL,
 CONSTRAINT PK_TAGS PRIMARY KEY ( id_tag )
);


-- ************************************** cercle.type_media
CREATE TABLE cercle.type_media
(
 id_media SERIAL NOT NULL,
 media    varchar(50) NOT NULL,
 CONSTRAINT PK_TYPE_MEDIA PRIMARY KEY ( id_media )
);


-- ************************************** cercle.users
CREATE TABLE cercle.users
(
 id_user      SERIAL NOT NULL,
 nom          varchar(50) NOT NULL,
 prenom       varchar(50) NOT NULL,
 username     varchar(20) NOT NULL,
 mail         varchar(50) NOT NULL,
 password_hash VARCHAR(255) NOT NULL,
 telephone    varchar(20) NULL,
 bio          varchar(255) NULL,
 photo_profil varchar(255) NULL,
 id_role      int NOT NULL,
 "private"    bool NOT NULL,
 certified    bool NOT NULL,
 is_active    bool NOT NULL,
 created_at   timestamp NOT NULL,
 updated_at   timestamp NOT NULL,
 last_login   timestamp NULL,
 CONSTRAINT PK_USERS PRIMARY KEY ( id_user ),
 CONSTRAINT FK_USERS_ID_ROLE FOREIGN KEY ( id_role ) REFERENCES cercle.roles ( id_role ),
 CONSTRAINT unique_username UNIQUE (username),
 CONSTRAINT unique_email UNIQUE (mail)
);


-- ************************************** cercle.user_preferences
CREATE TABLE cercle.user_preferences
(
 id_user            int NOT NULL,
 id_langue          int NOT NULL,
 email_notification bool NOT NULL,
 id_theme           int NOT NULL,
 CONSTRAINT PK_USER_PREFERENCES PRIMARY KEY ( id_user ),
 CONSTRAINT FK_USER_PREFERENCES_ID_LANGUE FOREIGN KEY ( id_langue ) REFERENCES cercle.langues ( id_langue ),
 CONSTRAINT FK_USER_PREFERENCES_ID_THEME FOREIGN KEY ( id_theme ) REFERENCES cercle.themes ( id_theme ),
 CONSTRAINT FK_USER_PREFERENCES_ID_USER FOREIGN KEY ( id_user ) REFERENCES cercle.users ( id_user )
);


-- ************************************** cercle.messages_prives
CREATE TABLE cercle.messages_prives
(
 id_message SERIAL NOT NULL,
 sender     int NOT NULL,
 receiver   int NOT NULL,
 message    varchar(2048) NOT NULL,
 send_at    timestamp NOT NULL,
 read_at    timestamp NULL,
 active     bool NOT NULL,
 updated_at timestamp NOT NULL,
 CONSTRAINT PK_MESSAGES_PRIVES PRIMARY KEY ( id_message ),
 CONSTRAINT FK_MESSAGES_PRIVES_RECEIVER FOREIGN KEY ( receiver ) REFERENCES cercle.users ( id_user ),
 CONSTRAINT FK_MESSAGES_PRIVES_SENDER FOREIGN KEY ( sender ) REFERENCES cercle.users ( id_user )
);


-- ************************************** cercle.user_bannissements
CREATE TABLE cercle.user_bannissements
(
 id_bannissement SERIAL NOT NULL,
 user_banni      int NOT NULL,
 banni_by        int NOT NULL,
 raison          varchar(1024) NOT NULL,
 debut_ban       timestamp NOT NULL,
 fin_ban         timestamp NOT NULL,
 CONSTRAINT PK_USER_BANNISSEMENTS PRIMARY KEY ( id_bannissement ),
 CONSTRAINT FK_USER_BANNISSEMENTS_BANNI_BY FOREIGN KEY ( banni_by ) REFERENCES cercle.users ( id_user ),
 CONSTRAINT FK_USER_BANNISSEMENTS_USER_BANNI FOREIGN KEY ( user_banni ) REFERENCES cercle.users ( id_user )
);


-- ************************************** cercle.follow
CREATE TABLE cercle.follow
(
 follower   int NOT NULL,
 account    int NOT NULL,
 pending    bool NOT NULL,
 active     bool NOT NULL,
 notif_view bool NOT NULL,
 created_at timestamp NOT NULL,
 updated_at timestamp NOT NULL,
 CONSTRAINT PK_FOLLOW PRIMARY KEY ( follower, account ),
 CONSTRAINT FK_FOLLOW_ACCOUNT FOREIGN KEY ( account ) REFERENCES cercle.users ( id_user ),
 CONSTRAINT FK_FOLLOW_FOLLOWER FOREIGN KEY ( follower ) REFERENCES cercle.users ( id_user )
);


-- ************************************** cercle.post
CREATE TABLE cercle.post
(
 id_post         SERIAL NOT NULL,
 id_user         int NOT NULL,
 post_parent     int NULL,
 content         varchar(280) NOT NULL,
 id_message_type int NOT NULL,
 active          bool NOT NULL,
 created_at      timestamp NOT NULL,
 updated_at      timestamp NOT NULL,
 CONSTRAINT PK_POST PRIMARY KEY ( id_post ),
 CONSTRAINT FK_POST_ID_MESSAGE_TYPE FOREIGN KEY ( id_message_type ) REFERENCES cercle.message_type ( id_message_type ),
 CONSTRAINT FK_POST_ID_USER FOREIGN KEY ( id_user ) REFERENCES cercle.users ( id_user ),
 CONSTRAINT FK_POST_POST_PARENT FOREIGN KEY ( post_parent ) REFERENCES cercle.post ( id_post )
);


-- ************************************** cercle.post_tags
CREATE TABLE cercle.post_tags
(
 id_post int NOT NULL,
 id_tag  int NOT NULL,
 CONSTRAINT PK_POST_TAGS PRIMARY KEY ( id_post, id_tag ),
 CONSTRAINT FK_POST_TAGS_ID_POST FOREIGN KEY ( id_post ) REFERENCES cercle.post ( id_post ),
 CONSTRAINT FK_POST_TAGS_TAGS FOREIGN KEY ( id_tag ) REFERENCES cercle.tags ( id_tag )
);


-- ************************************** cercle.img_vid_post
CREATE TABLE cercle.img_vid_post
(
 id_img_vid_post SERIAL NOT NULL,
 id_post    int NOT NULL,
 id_media   int NOT NULL,
 lien_media varchar(255) NOT NULL,
 CONSTRAINT PK_IMG_VID_POST PRIMARY KEY ( id_img_vid_post ),
 CONSTRAINT FK_IMG_VID_POST_ID_MEDIA FOREIGN KEY ( id_media ) REFERENCES cercle.type_media ( id_media ),
 CONSTRAINT FK_IMG_VID_POST_ID_POST FOREIGN KEY ( id_post ) REFERENCES cercle.post ( id_post )
);


-- ************************************** cercle.img_vid_post
CREATE TABLE cercle.img_vid_msg
(
 id_img_vid_msg SERIAL NOT NULL,
 id_message    int NOT NULL,
 id_media   int NOT NULL,
 lien_media varchar(255) NOT NULL,
 CONSTRAINT PK_IMG_VID_MSG PRIMARY KEY ( id_img_vid_msg ),
 CONSTRAINT FK_IMG_VID_MSG_ID_MEDIA FOREIGN KEY ( id_media ) REFERENCES cercle.type_media ( id_media ),
 CONSTRAINT FK_IMG_VID_MSG_ID_MSG FOREIGN KEY ( id_message ) REFERENCES cercle.messages_prives ( id_message )
);


-- ************************************** cercle.likes
CREATE TABLE cercle.likes
(
 id_user    int NOT NULL,
 id_post    int NOT NULL,
 active     bool NOT NULL,
 notif_view bool NOT NULL,
 created_at timestamp NOT NULL,
 updated_at timestamp NOT NULL,
 CONSTRAINT PK_LIKES PRIMARY KEY ( id_user, id_post ),
 CONSTRAINT FK_LIKES_ID_POST FOREIGN KEY ( id_post ) REFERENCES cercle.post ( id_post ),
 CONSTRAINT FK_LIKES_ID_USER FOREIGN KEY ( id_user ) REFERENCES cercle.users ( id_user )
);


-- ************************************** cercle.mentions
CREATE TABLE cercle.mentions
(
 id_user    int NOT NULL,
 id_post    int NOT NULL,
 notif_view bool NOT NULL,
 CONSTRAINT PK_MENTIONS PRIMARY KEY ( id_user, id_post ),
 CONSTRAINT FK_MENTIONS_ID_POST FOREIGN KEY ( id_post ) REFERENCES cercle.post ( id_post ),
 CONSTRAINT FK_MENTIONS_ID_USER FOREIGN KEY ( id_user ) REFERENCES cercle.users ( id_user )
);


-- ************************************** cercle.report
CREATE TABLE cercle.report
(
 id_user     int NOT NULL,
 id_post     int NOT NULL,
 reported_at timestamp NOT NULL,
 raison      varchar(255) NOT NULL,
 CONSTRAINT PK_REPORT PRIMARY KEY ( id_user, id_post ),
 CONSTRAINT FK_REPORT_ID_POST FOREIGN KEY ( id_post ) REFERENCES cercle.post ( id_post ),
 CONSTRAINT FK_REPORT_ID_USER FOREIGN KEY ( id_user ) REFERENCES cercle.users ( id_user )
);



CREATE INDEX idx_post_user_created ON cercle.post(id_user, created_at DESC);

CREATE INDEX idx_post_created_global ON cercle.post(created_at DESC) WHERE active = true;

CREATE INDEX idx_follow_account ON cercle.follow(account) WHERE active = true;

CREATE INDEX idx_follow_follower ON cercle.follow(follower) WHERE active = true;

CREATE INDEX idx_likes_post ON cercle.likes(id_post) WHERE active = true;

CREATE INDEX idx_post_parent ON cercle.post(post_parent) WHERE post_parent IS NOT NULL;

CREATE INDEX idx_messages_receiver_date ON cercle.messages_prives(receiver, send_at DESC);

CREATE INDEX idx_mentions_user ON cercle.mentions(id_user) WHERE notif_view = false;

CREATE INDEX idx_post_content_search ON cercle.post 
    USING gin(to_tsvector('french', content)) WHERE active = true;

CREATE INDEX idx_post_tags_tag ON cercle.post_tags(id_tag);

CREATE INDEX idx_users_last_login ON cercle.users(last_login DESC);


GRANT USAGE ON SCHEMA cercle TO postgres;
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA cercle TO postgres;
ALTER DEFAULT PRIVILEGES IN SCHEMA cercle GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO postgres;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA cercle TO postgres;
